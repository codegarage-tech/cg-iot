plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.google.gms.google-services'
//    id 'realm-android'
}

apply from: '../dependencies.gradle'

android {
    compileSdk "$libraryVersions.compileSdk".toInteger()

    signingConfigs {
        releaseConfig {
            try {
                keyAlias 'keydata.keystore'
                keyPassword KEY_PASSWORD
                storeFile file('../misc/keydata.keystore.jks')
                storePassword STORE_PASSWORD
            } catch (Exception ex) {
                throw new Exception(ex.getMessage())
            }
        }
    }

    namespace 'com.meembusoft.iot'

    defaultConfig {
        applicationId "com.meembusoft.iot"
        minSdk "$libraryVersions.minSdk".toInteger()
        targetSdk "$libraryVersions.targetSdk".toInteger()

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true

        // define your base Applications name here
        resValue 'string', 'app_name', 'Smart Home'
    }

    buildTypes {
        debug {
            shrinkResources false
            minifyEnabled false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            shrinkResources true
            minifyEnabled true
            debuggable false

            //For single file
//            proguardFile 'aboutbox.pro'
            //For all files
//            proguardFiles fileTree(dir: "rules", include: ["*.pro"]).asList().toArray()

            //Default proguard call
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseConfig
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        dataBinding = true
        viewBinding = true
    }

    //Flavor definition
    flavorDimensions "appType", "marketType"
    productFlavors {
        smarthome {
            dimension "appType"

            applicationIdSuffix ".smarthome"
        }

        bd {
            dimension "marketType"

//            applicationIdSuffix ".bd"
            versionCode "$libraryVersions.smartHomeBDVersionCode".toInteger()
            versionName "$libraryVersions.smartHomeBDVersionName"

            resValue 'string', 'app_name', 'Smart Home'
        }

        us {
            dimension "marketType"

//            applicationIdSuffix ".us"
            versionCode "$libraryVersions.smartHomeUSVersionCode".toInteger()
            versionName "$libraryVersions.smartHomeUSVersionName"

            resValue 'string', 'app_name', 'Smart Home(US)'
        }

        uk {
            dimension "marketType"

//            applicationIdSuffix ".uk"
            versionCode "$libraryVersions.smartHomeUKVersionCode".toInteger()
            versionName "$libraryVersions.smartHomeUKVersionName"

            resValue 'string', 'app_name', 'Smart Home(UK)'
        }
    }

    //Remove unwanted vairant
    android.variantFilter { variant ->
        if (variant.getFlavors().get(0).name.equals('smarthome')
                && (variant.getFlavors().get(1).name.equals('us')
                || variant.getFlavors().get(1).name.equals('uk'))) {
            variant.setIgnore(true)
        }
    }

    //Format output
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            println variant

            //Rename the output apk file
            def appName = variant.mergedFlavor.resValues.get('string/app_name')
            def underScore = "_"
            def hyphen = "-"
            def appType = variant.productFlavors[0].name
            def marketType = variant.productFlavors[1].name
            def version = variant.versionName
            def buildType = variant.buildType.name
            System.out.println("appName: " + appName.getValue())
            System.out.println("appType: " + appType)
            System.out.println("marketType: " + marketType)
            System.out.println("version: " + version)
            System.out.println("buildType: " + buildType)
            def releaseApkName = "${appName.getValue()}${underScore}${marketType.toUpperCase()}${underScore}${version}${underScore}${buildType.toUpperCase()}.apk"
            output.outputFileName = releaseApkName
            System.out.println("outputFileName: " + outputFileName)

            // set new resValue for final app name
            def finalAppName = ""
            if (appType.equals('smarthome')) {
                finalAppName = appName.getValue()
            }
            System.out.println("finalAppName: " + finalAppName)
            variant.resValue('string', 'app_name', "${finalAppName}")
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}

def static String convertToCamelCase(String str) {
    if (str == null) {
        return null
    }

    boolean space = true
    StringBuilder builder = new StringBuilder(str)
    final int len = builder.length()

    for (int i = 0; i < len; ++i) {
        char c = builder.charAt(i)
        if (space) {
            if (!Character.isWhitespace(c)) {
                // Convert to title case and switch out of whitespace mode.
                builder.setCharAt(i, Character.toTitleCase(c))
                space = false
            }
        } else if (Character.isWhitespace(c)) {
            space = true
        } else {
            builder.setCharAt(i, Character.toLowerCase(c))
        }
    }

    return builder.toString()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //Androidx support libraries
    implementation libraries.androidXCore
    implementation libraries.androidXConstraintLayout
    implementation libraries.androidXMultiDex

    // Kotlin support
    implementation libraries.kotlinStdlibJdk7
    implementation libraries.androidXCoreKtx

    // Image loading
    implementation libraries.glide
    annotationProcessor libraries.glideCompiler

    // Parceler
    implementation libraries.parcelerApi
    annotationProcessor libraries.parceler

    // Barcode
    implementation libraries.zxingAndroidEmbedded

    // Switch icon
    implementation 'com.github.zagum:Android-SwitchIcon:1.3.8'

    // Location library
    implementation libraries.playServicesLocation

    // Views
    implementation 'io.github.luizgrp.sectionedrecyclerviewadapter:sectionedrecyclerviewadapter:1.2.0'

    // Rule view
    implementation 'com.zjun:rule-view:0.0.1'

    // Animation
    implementation 'com.labo.kaji:fragmentanimations:0.1.1'
    implementation 'com.github.ali-sardari:AnimUtils:1.0.1'
    implementation 'me.wangyuwei:ParticleView:1.0.4'
//    implementation 'com.facebook.rebound:rebound:0.3.8'
    //https://github.com/cywmm/AnimationUtil

    // Util
    implementation libraries.rcLibrary

    // Blur view
    implementation 'jp.wasabeef:blurry:3.0.0'

    // MQTT
    implementation 'com.github.ministryofprogramming:RxMQTTClient:1.0.2'

    // Youtube player
    implementation libraries.androidYoutubePlayer

    // Rating bar
    implementation libraries.materialRatingBar

    // Menu
    implementation libraries.flourish

    // Switch
    implementation 'com.bitvale:switcher:1.0.5'

    //awesome text
    implementation 'ss.anoop:awesome-textinput-layout:1.0.0'

    // Library projects
    implementation project(":library:ribblemenu")
    implementation project(":library:statusbarutil")
    implementation project(":library:niftydialogeffects")
    implementation project(":library:verticalstepperform")
    implementation project(":library:slideupandroid")
    implementation project(":library:esptouch")
    implementation project(":library:easyrecyclerview")
    implementation project(":library:flowlayout")
    implementation project(":library:multiwaveheader")
    implementation project(":library:pdialog")
    implementation project(":library:glazyviewpager")
//    implementation project(":library:mqtt")
    implementation project(":library:toggleimagebutton")
    implementation project(":library:croller")
    implementation project(":library:attributionpresenter")
    implementation project(":library:aboutbox")
    implementation project(":library:localemanager")
    implementation project(":library:realmmanager")
    implementation project(":library:addtocart")
    implementation project(":library:animationmanager")
    implementation project(":library:retrofitmanager")
    implementation project(":library:fcmmanager")
    implementation project(":library:shopping")
    implementation project(":library:autoimageslider")
    implementation project(":library:fliptabs")
    implementation project(":library:stepperindicator")
    implementation project(":library:androidsweetsheet")
    implementation project(":library:ticketview")
    implementation project(":library:tvg")
    implementation project(":library:expansionpanel")
//    implementation(project(path: ':library:sociallogin')) {
//        exclude group: 'com.vk' //without VK
////        exclude group: 'com.facebook.android' //without Facebook
////        exclude group: 'com.google.android.gms'
//    }
}